//
// GetWeatherForecast200ResponseListInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetWeatherForecast200ResponseListInner: Codable, Hashable {

    public var dt: Int?
    public var main: GetWeatherForecast200ResponseListInnerMain?
    public var weather: [GetWeatherData200ResponseWeatherInner]?
    public var clouds: GetWeatherData200ResponseClouds?
    public var wind: GetWeatherForecast200ResponseListInnerWind?
    public var visibility: Int?
    public var pop: Double?
    public var rain: GetWeatherForecast200ResponseListInnerRain?
    public var sys: GetWeatherForecast200ResponseListInnerSys?
    public var dtTxt: String?

    public init(dt: Int? = nil, main: GetWeatherForecast200ResponseListInnerMain? = nil, weather: [GetWeatherData200ResponseWeatherInner]? = nil, clouds: GetWeatherData200ResponseClouds? = nil, wind: GetWeatherForecast200ResponseListInnerWind? = nil, visibility: Int? = nil, pop: Double? = nil, rain: GetWeatherForecast200ResponseListInnerRain? = nil, sys: GetWeatherForecast200ResponseListInnerSys? = nil, dtTxt: String? = nil) {
        self.dt = dt
        self.main = main
        self.weather = weather
        self.clouds = clouds
        self.wind = wind
        self.visibility = visibility
        self.pop = pop
        self.rain = rain
        self.sys = sys
        self.dtTxt = dtTxt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dt
        case main
        case weather
        case clouds
        case wind
        case visibility
        case pop
        case rain
        case sys
        case dtTxt = "dt_txt"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dt, forKey: .dt)
        try container.encodeIfPresent(main, forKey: .main)
        try container.encodeIfPresent(weather, forKey: .weather)
        try container.encodeIfPresent(clouds, forKey: .clouds)
        try container.encodeIfPresent(wind, forKey: .wind)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(pop, forKey: .pop)
        try container.encodeIfPresent(rain, forKey: .rain)
        try container.encodeIfPresent(sys, forKey: .sys)
        try container.encodeIfPresent(dtTxt, forKey: .dtTxt)
    }
}

